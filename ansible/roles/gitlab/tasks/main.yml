---
- name: Base Domain Variable Check
  debug:
    msg: "{{ lookup('env', 'CDLAB_BASE_DOMAIN') }}"

- name: Disable transparent Huge Pages
  copy:
    src: files/rc.local
    dest: /etc/rc.local

- name: Run command to disable transparent Huge Pages
  command: echo never > /sys/kernel/mm/transparent_hugepage/enabled

- name: Ensure vm.overcommit_memory = 1
  lineinfile:
    path: /etc/sysctl.conf
    regexp: '^vm.overcommit_memory ='
    line: vm.overcommit_memory = 1

- name: Run command to set vm.overcommit_memory=1
  command: sysctl vm.overcommit_memory=1

# -----------------------------
# docker-compose
# -----------------------------

- name: Create gitlab dir for docker-compose based installation
  file:
    path: /opt/docker/gitlab
    state: directory

- name: Setup gitlab docker-compose file
  template:
    src: templates/docker-compose.yml.j2
    dest: /opt/docker/gitlab/docker-compose.yml

# -----------------------------
# setup api token for further provisioning
# -----------------------------
- name: Setup api token
  template:
    src: templates/025_api_personal_access_token.rb.j2
    dest: /opt/docker/gitlab/025_api_personal_access_token.rb
    mode: 0644

# -----------------------------
# persistence
# -----------------------------

- name: Create storage - basedir
  file:
    path: /opt/docker/gitlab/storage
    state: directory

- name: Create storage - letsencrypt 
  file:
    path: /opt/docker/gitlab/storage/letsencrypt
    state: directory

- name: Create storage - gitlab
  file:
    path: /opt/docker/gitlab/storage/gitlab
    state: directory
    owner: "1000"
    group: "1000"
    mode: 0755

- name: Create storage - postgresql
  file:
    path: /opt/docker/gitlab/storage/postgresql
    state: directory
    owner: "101"
    group: "103"
    mode: 0755

- name: Create storage - redis
  file:
    path: /opt/docker/gitlab/storage/redis
    state: directory
    owner: "101"
    group: "101"
    mode: 0755

- name: Create storage - chartmuseum
  file:
    path: /opt/docker/gitlab/storage/chartmuseum
    state: directory
    owner: "1000"
    group: "1000"
    mode: 0755

- name: Create storage - charts
  file:
    path: /opt/docker/gitlab/storage/chartmuseum/charts
    state: directory
    owner: "1000"
    group: "1000"
    mode: 0755

- name: Create storage - registry
  file:
    path: /opt/docker/gitlab/storage/registry
    state: directory
    group: "1000"
    owner: "1000"
    mode: 0755

- name: Create storage - certs
  file:
    path: /opt/docker/gitlab/storage/registry/certs
    state: directory
    group: "1000"
    owner: "1000"
    mode: 0755

- name: Copy registry cert
  copy:
    src: files/registry.crt
    dest: /opt/docker/gitlab/storage/registry/certs/registry.crt
    owner: "1000"
    group: "1000"
    mode: 0644

- name: Copy registry key
  copy:
    src: files/registry.key
    dest: /opt/docker/gitlab/storage/registry/certs/registry.key
    owner: "1000"
    group: "1000"
    mode: 0600

# -----------------------------
# Start Services
# -----------------------------

- name: Create and start services
  community.general.docker_compose:
    project_src: /opt/docker/gitlab

# -----------------------------
# Make sure Gitlab is up & running
# -----------------------------

- name: Wait for gitlab to come up
  uri:
    url: "https://gitlab.{{ lookup('env', 'CDLAB_BASE_DOMAIN') }}/users/sign_in"
    follow_redirects: none
    method: GET
  register: _result
  until: _result.status == 200
  retries: 120 # 120 * 5 seconds = 10 Minutes (5*120/5)
  delay: 5 # Every 5 seconds

- name: Make sure that gitlab api is up and accessable with the bootstrapped token
  uri:
    url: "https://gitlab.{{ lookup('env', 'CDLAB_BASE_DOMAIN') }}/api/v4/users"
    follow_redirects: none
    method: GET
    headers:
      Content-Type: application/json
      PRIVATE-TOKEN: "{{ lookup('env', 'GITLAB_API_TOKEN') }}"
  register: _result
  until: _result.status == 200
  retries: 60 # 60 * 5 seconds = 5 Minutes (5*60/5)
  delay: 5 # Every 5 seconds

# -----------------------------
# Provision gitlab with example app and users
# -----------------------------
- name: Create .heiseacademy config dir
  file:
    path: /root/.heiseacademy
    state: directory
    mode: 0700

- name: Copy contents of .heiseacademy config dir
  copy:
    src: ~/.heiseacademy/
    dest: /root/.heiseacademy/
    mode: 0600

- name: Remove file DO_API_TOKEN
  file:
    path: /root/.heiseacademy/DO_API_TOKEN
    state: absent

- name: Download provisioning script
  get_url:
    url: "{{ gitlab_provisioning_script }}"
    dest: /root/gitlab-provisioning.sh
    mode: '0755'

- name: run gitlab-provisioning.sh
  shell: /root/gitlab-provisioning.sh
  register: output

- name: Debug gitlab-provisioning.sh
  debug:
    var: output
